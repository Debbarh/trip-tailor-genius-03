name: Backend CI

on:
  push:
    paths:
      - 'backend/**'
      - 'docker-compose.yml'
      - '.github/workflows/backend-ci.yml'
  pull_request:
    paths:
      - 'backend/**'
      - 'docker-compose.yml'

jobs:
  test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_DB: travel_db
          POSTGRES_USER: travel_user
          POSTGRES_PASSWORD: travel_pass
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U travel_user -d travel_db" \
          --health-interval=10s \
          --health-timeout=5s \
          --health-retries=5

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r backend/requirements.txt

      - name: Wait for Postgres
        env:
          POSTGRES_DB: travel_db
          POSTGRES_USER: travel_user
          POSTGRES_PASSWORD: travel_pass
        run: |
          python - <<'PY'
          import time, os
          import psycopg2
          for i in range(30):
              try:
                  psycopg2.connect(
                      dbname=os.environ['POSTGRES_DB'],
                      user=os.environ['POSTGRES_USER'],
                      password=os.environ['POSTGRES_PASSWORD'],
                      host='localhost',
                      port=5432,
                  ).close()
                  print('Postgres ready')
                  break
              except Exception as e:
                  print('Waiting for Postgres...', e)
                  time.sleep(2)
          else:
              raise SystemExit('Postgres not ready in time')
          PY

      - name: Django checks and migrations
        env:
          DJANGO_DEBUG: '1'
          DJANGO_SECRET_KEY: 'ci-secret'
          POSTGRES_DB: travel_db
          POSTGRES_USER: travel_user
          POSTGRES_PASSWORD: travel_pass
          POSTGRES_HOST: localhost
          POSTGRES_PORT: '5432'
        run: |
          python backend/manage.py makemigrations api --noinput
          python backend/manage.py migrate --noinput
          python backend/manage.py check

      - name: Run tests
        env:
          DJANGO_DEBUG: '1'
          DJANGO_SECRET_KEY: 'ci-secret'
          POSTGRES_DB: travel_db
          POSTGRES_USER: travel_user
          POSTGRES_PASSWORD: travel_pass
          POSTGRES_HOST: localhost
          POSTGRES_PORT: '5432'
        run: |
          python backend/manage.py test --noinput
